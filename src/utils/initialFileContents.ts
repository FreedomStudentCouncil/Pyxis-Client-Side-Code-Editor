export const initialFileContents = {
  '.gitignore': { type: 'file', content: '# 依存関係\nnode_modules/\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# ビルド出力\ndist/\nbuild/\n\n# 環境変数\n.env\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\n' },
  'README.md': { type: 'file', content: '# プロジェクトへようこそ\n\nこのプロジェクトはPyxisで作成されました。\n\n---\n\n## 使い方例\n\n### Node.js コード例\n\x60\x60\x60javascript\nconst fs = require(\'fs\');\nfs.writeFileSync(\'hello.txt\', \'Pyxisからこんにちは！\');\nconst content = fs.readFileSync(\'hello.txt\', \'utf8\');\nconsole.log(content);\n\x60\x60\x60\n\n### LaTeX 数式例\n$\nE = mc^2\n$\n$\nx = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}\n$\n\n### 複数モニター・テーマ変更\n- 設定パネルから「テーマカラー」「個別色設定」を変更できます。\n\n### ファイル操作\n- ファイルツリーでドラッグ＆ドロップや右クリックで新規作成・削除・リネーム可能。\n- インポート/エクスポートでローカルファイルの追加やダウンロードもできます。\n\n### Git 操作例\n\x60\x60\x60bash\n# リポジトリ初期化\ngit init\n# ファイル追加\ngit add .\n# コミット\ngit commit -m "初期コミット"\n# ブランチ作成・切替\ngit checkout -b feature/new-feature\n# マージ\ngit merge feature/new-feature\n\x60\x60\x60\n\n\n## Mermaid記法のリアルタイム編集\n\x60\x60\x60mermaid\ngraph TB\n    subgraph "ブラウザ IndexedDB"\n        subgraph "pyxis-fs (lightning-fs)"\n            GitFS[Git仮想ファイルシステム]\n            GitObjects[.git/objects/]\n            GitRefs[.git/refs/]\n            GitHead[.git/HEAD]\n            GitIndex[.git/index]\n        end\n        \n        subgraph "PyxisProjects"\n            Projects[projects テーブル]\n            Files[files テーブル]\n        end\n    end\n    \n    subgraph "React メモリ状態"\n        ProjectFiles[projectFiles state]\n        Tabs[tabs state]\n        ActiveTab[activeTabId state]\n        NodeRuntimeFlag[nodeRuntimeOperationInProgress]\n    end\n    \n    subgraph "UI コンポーネント"\n        Terminal[Terminal.tsx]\n        FileTree[FileTree.tsx]\n        Editor[CodeEditor.tsx]\n        RunPanel[RunPanel.tsx]\n    end\n    \n    GitFS --> Terminal\n    Projects --> ProjectFiles\n    Files --> ProjectFiles\n    ProjectFiles --> FileTree\n    ProjectFiles --> Tabs\n    Tabs --> Editor\n    \n    Terminal --> GitFS\n    Editor --> Tabs\n    RunPanel --> GitFS\n    RunPanel --> Files\n\x60\x60\x60\n---\n\n## よく使うコマンド\n- \x60ls\x60, \x60cd\x60, \x60cat\x60, \x60touch\x60, \x60mkdir\x60, \x60rm\x60, \x60cp\x60, \x60mv\x60, \x60echo\x60, \x60clear\x60\n- 詳細は \x60/docs/unix-commands.md\x60 を参照\n\n## 便利機能\n- LaTeXプレビュー\n- 複数モニター対応\n- テーマカラー変更\n- ファイルのインポート/ダウンロード\n- Git/プロジェクトファイルのダウンロード\n- Mermaid記法のリアルタイム編集\n---\n\n> Pyxisで快適な開発をお楽しみください！\n' },
  'docs': { type: 'folder', children: {
      'docs_getting-started.md': { type: 'file', content: '# スタートガイド\n\nこのプロジェクトの使用方法について説明します。\n\n1. コードエディタでファイルを編集\n2. ターミナルでコマンド実行\n3. Gitパネルで履歴管理\n' },
      'docs_git-commands.md': { type: 'file', content: '# Gitコマンドの使い方\n\nPyxisでは以下のGitコマンドが利用できます。\n\n- **git init**: 新しいリポジトリを初期化\n- **git add [ファイル]**: ファイルをステージに追加\n- **git commit -m "メッセージ"**: 変更をコミット\n- **git status**: 現在の状態を表示\n- **git log**: コミット履歴を表示\n- **git branch**: ブランチ一覧を表示\n- **git checkout [ブランチ名]**: ブランチを切り替え\n- **git checkout -b [新ブランチ名]**: 新しいブランチを作成して切り替え\n- **git merge [ブランチ名]**: ブランチをマージ\n- **git reset --hard [コミットID]**: 指定コミットまで巻き戻し\n- **git revert [コミットID]**: 指定コミットを打ち消すコミットを作成\n\n詳細は画面のGitパネルやヒストリーをご参照ください。\n' },
      'docs_unix-commands.md': { type: 'file', content: '# ターミナルで使えるUnixコマンド\n\nPyxisのターミナルでは以下のコマンドが利用できます（一部制限あり）。\n\n- **ls**: ディレクトリの内容を表示\n- **cd [ディレクトリ]**: ディレクトリを移動\n- **pwd**: 現在のパスを表示\n- **cat [ファイル]**: ファイルの内容を表示\n- **touch [ファイル]**: 空ファイルを作成\n- **mkdir [ディレクトリ]**: ディレクトリを作成\n- **rm [ファイル/ディレクトリ]**: ファイルやディレクトリを削除\n- **cp [元] [先]**: ファイルをコピー\n- **mv [元] [先]**: ファイルを移動/リネーム\n- **echo [文字列]**: 文字列を表示\n- **clear**: 画面をクリア\n\n※ npmコマンドは現在開発中です。\n\n詳細はターミナルで**help**コマンドを実行してください。\n' }
    } },
  'src': { type: 'folder', children: {
      'src_fileOperationg.js': { type: 'file', content: 'const fs = require(\'fs\').promises;\nconst triviaList = [\n  \'カンガルーの赤ちゃんは生まれたとき2cmしかない！\',\n  \'富士山は1707年に噴火している！\',\n  \'バナナは実はベリー類に分類される！\',\n  \'日本では縦書きが一般的だけど、横書きの起源はタイプライターにあると言われてる！\'\n];\n\nasync function saveRandomTrivia() {\n  const randomTrivia = triviaList[Math.floor(Math.random() * triviaList.length)];\n  const data = { date: new Date().toISOString(), trivia: randomTrivia };\n  try {\n    await fs.writeFile(\'trivia.json\', JSON.stringify(data, null, 2), \'utf8\');\n    console.log(\'今日の豆知識を保存しました:\');\n    console.log(randomTrivia);\n  } catch (error) {\n    console.error(\'保存中にエラーが発生しました:\', error.message);\n  }\n}\n\nsaveRandomTrivia();\n' },
      'src_index.js': { type: 'file', content: '// メインエントリーポイント\nconsole.log("Hello, World!");\n\n// 配列処理の例\nconst arr = [1, 2, 3, 4];\nconst squared = arr.map(x => x * x);\nconsole.log("二乗した配列:", squared);\n\n// 非同期処理の例\nasync function getData() {\n  return await new Promise(res => setTimeout(() => res("1秒経ちました。"), 1000));\n}\ngetData().then(console.log);\n\n// プロジェクトのコードをここに記述してください\n' }
    } },
  'web': { type: 'folder', children: {
      'index.html': { type: 'file', content: '\n<!DOCTYPE html>\n<html lang="ja">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>複雑なファイルエディタ</title>\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <header>\n    <h1>複雑なファイルエディタ</h1>\n    <nav>\n      <button class="tab-btn" data-tab="editor">エディタ</button>\n      <button class="tab-btn" data-tab="preview">プレビュー</button>\n      <button class="tab-btn" data-tab="settings">設定</button>\n    </nav>\n  </header>\n  <div class="container">\n    <aside class="sidebar">\n      <h2>ファイル一覧</h2>\n      <ul id="fileList"></ul>\n      <input type="file" id="fileInput" multiple>\n    </aside>\n    <main>\n      <section id="tab-editor" class="tab-content">\n        <h2>エディタ</h2>\n        <textarea id="editor" rows="20" cols="80"></textarea>\n        <button id="saveBtn">保存</button>\n      </section>\n      <section id="tab-preview" class="tab-content" style="display:none;">\n        <h2>プレビュー</h2>\n        <pre id="previewArea"></pre>\n      </section>\n      <section id="tab-settings" class="tab-content" style="display:none;">\n        <h2>設定</h2>\n        <label><input type="checkbox" id="autosave"> 自動保存</label>\n      </section>\n    </main>\n  </div>\n  <footer>\n    <span id="status">準備完了</span>\n  </footer>\n  <script src="script.js"></script>\n</body>\n</html>\n' },
      'script.js': { type: 'file', content: '\n// タブ切り替え\nconst tabBtns = document.querySelectorAll(\'.tab-btn\');\nconst tabContents = document.querySelectorAll(\'.tab-content\');\ntabBtns.forEach(btn => {\n  btn.addEventListener(\'click\', () => {\n    tabContents.forEach(sec => sec.style.display = \'none\');\n    document.getElementById(\x60tab-${btn.dataset.tab}\x60).style.display = \'\';\n    tabBtns.forEach(b => b.classList.remove(\'active\'));\n    btn.classList.add(\'active\');\n  });\n});\n\n// ファイルリスト管理\nconst fileList = document.getElementById(\'fileList\');\nconst fileInput = document.getElementById(\'fileInput\');\nconst editor = document.getElementById(\'editor\');\nconst previewArea = document.getElementById(\'previewArea\');\nconst saveBtn = document.getElementById(\'saveBtn\');\nconst status = document.getElementById(\'status\');\nconst autosave = document.getElementById(\'autosave\');\n\nlet files = {};\nlet currentFile = null;\n\nfunction updateFileList() {\n  fileList.innerHTML = \'\';\n  Object.keys(files).forEach(name => {\n    const li = document.createElement(\'li\');\n    li.textContent = name;\n    li.className = (name === currentFile) ? \'selected\' : \'\';\n    li.onclick = () => selectFile(name);\n    fileList.appendChild(li);\n  });\n}\n\nfunction selectFile(name) {\n  currentFile = name;\n  editor.value = files[name];\n  updateFileList();\n  status.textContent = \x60${name} を編集中\x60;\n  showPreview();\n}\n\nfileInput.addEventListener(\'change\', e => {\n  Array.from(e.target.files).forEach(file => {\n    const reader = new FileReader();\n    reader.onload = function(ev) {\n      files[file.name] = ev.target.result;\n      currentFile = file.name;\n      updateFileList();\n      selectFile(file.name);\n      saveToStorage();\n    };\n    reader.readAsText(file);\n  });\n});\n\neditor.addEventListener(\'input\', () => {\n  if (currentFile) {\n    files[currentFile] = editor.value;\n    showPreview();\n    if (autosave.checked) saveToStorage();\n  }\n});\n\nsaveBtn.addEventListener(\'click\', () => {\n  if (currentFile) {\n    saveToStorage();\n    status.textContent = \x60${currentFile} を保存しました\x60;\n    setTimeout(() => status.textContent = \'準備完了\', 1200);\n  }\n});\n\nfunction showPreview() {\n  previewArea.textContent = editor.value;\n}\n\n// ローカルストレージ保存・復元\nfunction saveToStorage() {\n  localStorage.setItem(\'files\', JSON.stringify(files));\n  localStorage.setItem(\'currentFile\', currentFile);\n}\n\nfunction loadFromStorage() {\n  const storedFiles = localStorage.getItem(\'files\');\n  const storedCurrent = localStorage.getItem(\'currentFile\');\n  if (storedFiles) {\n    files = JSON.parse(storedFiles);\n    currentFile = storedCurrent;\n    updateFileList();\n    if (currentFile) selectFile(currentFile);\n  }\n}\n\nautosave.addEventListener(\'change\', () => {\n  status.textContent = autosave.checked ? \'自動保存ON\' : \'自動保存OFF\';\n  setTimeout(() => status.textContent = \'準備完了\', 1000);\n});\n\nwindow.addEventListener(\'DOMContentLoaded\', () => {\n  loadFromStorage();\n  tabBtns[0].click(); // 最初はエディタタブ\n});\n' },
      'style.css': { type: 'file', content: '\nbody {\n  background: #f7f7fa;\n  color: #222;\n  font-family: \'Segoe UI\', \'Meiryo\', sans-serif;\n  margin: 0;\n}\nheader {\n  background: #3b8eea;\n  color: #fff;\n  padding: 1em 2em;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\nheader h1 {\n  margin: 0;\n  font-size: 1.5em;\n}\nnav {\n  display: flex;\n  gap: 1em;\n}\n.tab-btn {\n  background: #fff;\n  color: #3b8eea;\n  border: 1px solid #3b8eea;\n  border-radius: 6px 6px 0 0;\n  padding: 0.5em 1.2em;\n  font-size: 1em;\n  cursor: pointer;\n}\n.tab-btn.active {\n  background: #3b8eea;\n  color: #fff;\n}\n.container {\n  display: flex;\n  min-height: 70vh;\n}\n.sidebar {\n  background: #eaf2fb;\n  width: 220px;\n  padding: 1em;\n  border-right: 1px solid #c3d6ee;\n}\n.sidebar h2 {\n  font-size: 1.1em;\n  margin-top: 0;\n}\n#fileList {\n  list-style: none;\n  padding: 0;\n  margin: 0 0 1em 0;\n}\n#fileList li {\n  padding: 0.4em 0.7em;\n  cursor: pointer;\n  border-radius: 4px;\n  margin-bottom: 2px;\n}\n#fileList li.selected {\n  background: #3b8eea;\n  color: #fff;\n}\nmain {\n  flex: 1;\n  padding: 1.5em;\n}\n.tab-content {\n  display: block;\n}\n#editor {\n  width: 100%;\n  min-height: 300px;\n  font-size: 1.1em;\n  font-family: \'Fira Mono\', \'Consolas\', monospace;\n  border: 1px solid #c3d6ee;\n  border-radius: 6px;\n  padding: 1em;\n  margin-bottom: 1em;\n  background: #fff;\n  box-sizing: border-box;\n}\n#saveBtn {\n  background: #3b8eea;\n  color: #fff;\n  border: none;\n  padding: 0.7em 1.5em;\n  border-radius: 6px;\n  font-size: 1.1em;\n  cursor: pointer;\n}\n#previewArea {\n  background: #fff;\n  border: 1px solid #c3d6ee;\n  border-radius: 6px;\n  padding: 1em;\n  min-height: 300px;\n  font-family: \'Fira Mono\', \'Consolas\', monospace;\n  font-size: 1.1em;\n  white-space: pre-wrap;\n}\nfooter {\n  background: #eaf2fb;\n  color: #3b8eea;\n  text-align: right;\n  padding: 0.7em 2em;\n  font-size: 1em;\n  border-top: 1px solid #c3d6ee;\n}\n' }
    } }
};
