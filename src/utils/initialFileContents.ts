export const initialFileContents = {
  '.gitignore': { type: 'file', content: '# 依存関係\nnode_modules/\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# ビルド出力\ndist/\nbuild/\n\n# 環境変数\n.env\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\n' },
  'README.md': { type: 'file', content: '# プロジェクトへようこそ\n\nこのプロジェクトはPyxisで作成されました。\n\n---\n\n## 使い方例\n\n### Node.js コード例\n\x60\x60\x60javascript\nconst fs = require(\'fs\');\nfs.writeFileSync(\'hello.txt\', \'Pyxisからこんにちは！\');\nconst content = fs.readFileSync(\'hello.txt\', \'utf8\');\nconsole.log(content);\n\x60\x60\x60\n\n### LaTeX 数式例\n$\nE = mc^2\n$\n$\nx = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}\n$\n\n### 複数モニター・テーマ変更\n- 設定パネルから「テーマカラー」「個別色設定」を変更できます。\n\n### ファイル操作\n- ファイルツリーでドラッグ＆ドロップや右クリックで新規作成・削除・リネーム可能。\n- インポート/エクスポートでローカルファイルの追加やダウンロードもできます。\n\n### Git 操作例\n\x60\x60\x60bash\n# リポジトリ初期化\ngit init\n# ファイル追加\ngit add .\n# コミット\ngit commit -m "初期コミット"\n# ブランチ作成・切替\ngit checkout -b feature/new-feature\n# マージ\ngit merge feature/new-feature\n\x60\x60\x60\n\n\n## Mermaid記法のリアルタイム編集\n\x60\x60\x60mermaid\ngraph TB\n    subgraph "ブラウザ IndexedDB"\n        subgraph "pyxis-fs (lightning-fs)"\n            GitFS[Git仮想ファイルシステム]\n            GitObjects[.git/objects/]\n            GitRefs[.git/refs/]\n            GitHead[.git/HEAD]\n            GitIndex[.git/index]\n        end\n        \n        subgraph "PyxisProjects"\n            Projects[projects テーブル]\n            Files[files テーブル]\n        end\n    end\n    \n    subgraph "React メモリ状態"\n        ProjectFiles[projectFiles state]\n        Tabs[tabs state]\n        ActiveTab[activeTabId state]\n        NodeRuntimeFlag[nodeRuntimeOperationInProgress]\n    end\n    \n    subgraph "UI コンポーネント"\n        Terminal[Terminal.tsx]\n        FileTree[FileTree.tsx]\n        Editor[CodeEditor.tsx]\n        RunPanel[RunPanel.tsx]\n    end\n    \n    GitFS --> Terminal\n    Projects --> ProjectFiles\n    Files --> ProjectFiles\n    ProjectFiles --> FileTree\n    ProjectFiles --> Tabs\n    Tabs --> Editor\n    \n    Terminal --> GitFS\n    Editor --> Tabs\n    RunPanel --> GitFS\n    RunPanel --> Files\n\x60\x60\x60\n---\n\n## よく使うコマンド\n- \x60ls\x60, \x60cd\x60, \x60cat\x60, \x60touch\x60, \x60mkdir\x60, \x60rm\x60, \x60cp\x60, \x60mv\x60, \x60echo\x60, \x60clear\x60\n- 詳細は \x60/docs/unix-commands.md\x60 を参照\n\n## 便利機能\n- LaTeXプレビュー\n- 複数モニター対応\n- テーマカラー変更\n- ファイルのインポート/ダウンロード\n- Git/プロジェクトファイルのダウンロード\n- Mermaid記法のリアルタイム編集\n---\n\n> Pyxisで快適な開発をお楽しみください！\n' },
  'docs': { type: 'folder', children: {
      'docs_getting-started.md': { type: 'file', content: '# スタートガイド\n\nこのプロジェクトの使用方法について説明します。\n\n1. コードエディタでファイルを編集\n2. ターミナルでコマンド実行\n3. Gitパネルで履歴管理\n' },
      'docs_git-commands.md': { type: 'file', content: '# Gitコマンドの使い方\n\nPyxisでは以下のGitコマンドが利用できます。\n\n- **git init**: 新しいリポジトリを初期化\n- **git add [ファイル]**: ファイルをステージに追加\n- **git commit -m "メッセージ"**: 変更をコミット\n- **git status**: 現在の状態を表示\n- **git log**: コミット履歴を表示\n- **git branch**: ブランチ一覧を表示\n- **git checkout [ブランチ名]**: ブランチを切り替え\n- **git checkout -b [新ブランチ名]**: 新しいブランチを作成して切り替え\n- **git merge [ブランチ名]**: ブランチをマージ\n- **git reset --hard [コミットID]**: 指定コミットまで巻き戻し\n- **git revert [コミットID]**: 指定コミットを打ち消すコミットを作成\n\n詳細は画面のGitパネルやヒストリーをご参照ください。\n' },
      'docs_unix-commands.md': { type: 'file', content: '# ターミナルで使えるUnixコマンド\n\nPyxisのターミナルでは以下のコマンドが利用できます（一部制限あり）。\n\n- **ls**: ディレクトリの内容を表示\n- **cd [ディレクトリ]**: ディレクトリを移動\n- **pwd**: 現在のパスを表示\n- **cat [ファイル]**: ファイルの内容を表示\n- **touch [ファイル]**: 空ファイルを作成\n- **mkdir [ディレクトリ]**: ディレクトリを作成\n- **rm [ファイル/ディレクトリ]**: ファイルやディレクトリを削除\n- **cp [元] [先]**: ファイルをコピー\n- **mv [元] [先]**: ファイルを移動/リネーム\n- **echo [文字列]**: 文字列を表示\n- **clear**: 画面をクリア\n\n※ npmコマンドは現在開発中です。\n\n詳細はターミナルで**help**コマンドを実行してください。\n' }
    } },
  'homepage': { type: 'folder', children: {
      'index.html': { type: 'file', content: '<!DOCTYPE html>\n<html lang="ja">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Pyxis ホームページ</title>\n  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">\n  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">\n  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&family=Noto+Sans+JP:wght@400;700&display=swap">\n  <link rel="stylesheet" href="style.css">\n</head>\n<body>\n  <header class="animate__animated animate__fadeInDown">\n    <h1>Pyxis - Client-Side IDE & Terminal</h1>\n    <nav>\n      <button data-page="about" class="animate__animated animate__fadeInLeft"><i class="fa-solid fa-circle-info"></i> Pyxisとは</button>\n      <button data-page="features" class="animate__animated animate__fadeInLeft"><i class="fa-solid fa-star"></i> 特徴</button>\n      <button data-page="tech" class="animate__animated animate__fadeInLeft"><i class="fa-solid fa-microchip"></i> 技術スタック</button>\n      <button data-page="usage" class="animate__animated animate__fadeInLeft"><i class="fa-solid fa-book"></i> 使い方</button>\n      <button data-page="faq" class="animate__animated animate__fadeInLeft"><i class="fa-solid fa-question"></i> FAQ</button>\n    </nav>\n  </header>\n  <main id="main-content" class="animate__animated animate__fadeIn">\n    <!-- JSで内容を切り替え -->\n  </main>\n  <footer class="animate__animated animate__fadeInUp">\n    <small>Made with <span style="color:#e11d48">❤️</span> for developers who code everywhere</small>\n    <div class="footer-links">\n      <a href="https://github.com/Stasshe/Pyxis-Client-Side-Code-Editor" target="_blank" class="animate__animated animate__fadeIn"><i class="fa-brands fa-github"></i> GitHub</a>\n      <a href="https://pyxis-code.onrender.com" target="_blank" class="animate__animated animate__fadeIn"><i class="fa-solid fa-globe"></i> Demo</a>\n    </div>\n  </footer>\n  <script src="main.js"></script>\n</body>\n</html>\n' },
      'main.js': { type: 'file', content: 'const pages = {\n  about: \x60<h2>Pyxisとは</h2>\n    <p>Pyxisは、完全にクライアントサイドで動作するIDEです。Node.jsランタイムとGitをブラウザ上で利用でき、サーバー不要で本格的な開発環境を実現します。</p>\n    <ul>\n      <li>Node.jsアプリをブラウザで実行</li>\n      <li>VS Code風のUIとタブ・ファイル管理</li>\n      <li>Git操作も全てローカルで完結</li>\n      <li>iPadやモバイルにも最適化</li>\n    </ul>\x60,\n  features: \x60<h2>主な特徴</h2>\n    <ul>\n      <li><b>Node.jsランタイム</b> - npmコマンドやrequireが使える</li>\n      <li><b>VS Code風エディタ</b> - シンタックスハイライト・補完・エラー表示</li>\n      <li><b>Git統合</b> - init, add, commit, branch, merge, checkout等</li>\n      <li><b>マルチプラットフォーム</b> - iPad/モバイル/PC対応</li>\n      <li><b>LaTeX/Markdown/Mermaid対応</b></li>\n      <li><b>ダウンロード/インポート機能</b></li>\n    </ul>\x60,\n  tech: \x60<h2>技術スタック</h2>\n    <ul>\n      <li>Next.js (React) <span style="color:#888">※Pyxis本体はNext.js製</span></li>\n      <li>TypeScript, Tailwind CSS</li>\n      <li>Monaco Editor, xterm.js</li>\n      <li>Lightning FS, QuickJS, node-stdlib-browser</li>\n      <li>isomorphic-git, @gitgraph/react</li>\n    </ul>\x60,\n  usage: \x60<h2>使い方</h2>\n    <ol>\n      <li>Pyxisを開く</li>\n      <li>新規プロジェクト作成 or 既存プロジェクトを開く</li>\n      <li>Node.jsコードを編集・実行</li>\n      <li>Gitでバージョン管理</li>\n      <li>必要に応じてダウンロード/インポート</li>\n    </ol>\n    <h3>サンプル</h3>\n    <pre><code>// app.js\nconst fs = require(\'fs\');\nfs.writeFileSync(\'hello.txt\', \'Hello from Pyxis!\');\nconsole.log(fs.readFileSync(\'hello.txt\', \'utf8\'));\n</code></pre>\n    <h3>Git操作例</h3>\n    <pre><code>git init\ngit add .\ngit commit -m "Initial commit"\ngit checkout -b feature/new-feature\ngit merge feature/new-feature\n</code></pre>\x60\n};\n\nfunction setPage(page) {\n  const main = document.getElementById(\'main-content\');\n  main.classList.remove(\'animate__fadeIn\'); // 既存のアニメーションをリセット\n  main.classList.add(\'animate__fadeOut\'); // フェードアウトアニメーションを追加\n\n  setTimeout(() => {\n    main.innerHTML = pages[page] || pages.about;\n    main.classList.remove(\'animate__fadeOut\'); // フェードアウトをリセット\n    main.classList.add(\'animate__fadeIn\'); // フェードインアニメーションを追加\n  }, 500); // アニメーションの時間に合わせて調整\n}\n\ndocument.addEventListener(\'DOMContentLoaded\', () => {\n  setPage(\'about\');\n  document.querySelectorAll(\'nav button\').forEach(btn => {\n    btn.addEventListener(\'click\', e => {\n      setPage(btn.dataset.page);\n    });\n  });\n});\n' },
      'style.css': { type: 'file', content: 'body {\n  font-family: \'Roboto\', \'Noto Sans JP\', Arial, sans-serif;\n  margin: 0;\n  background: #f8fafc;\n  color: #222;\n}\nheader {\n  background: linear-gradient(90deg, #2563eb 60%, #1e293b 100%);\n  color: #fff;\n  padding: 1.5rem 2rem 1rem 2rem;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  box-shadow: 0 2px 8px rgba(37,99,235,0.08);\n}\n#logo {\n  width: 72px;\n  height: 72px;\n  margin-bottom: 0.5rem;\n  border-radius: 16px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.08);\n}\nnav {\n  margin-top: 1rem;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  justify-content: center;\n}\nnav button {\n  background: #fff;\n  color: #2563eb;\n  border: none;\n  margin: 0;\n  padding: 0.5rem 1.2rem;\n  border-radius: 8px;\n  cursor: pointer;\n  font-weight: bold;\n  font-size: 1rem;\n  box-shadow: 0 1px 4px rgba(37,99,235,0.07);\n  transition: background 0.2s, color 0.2s, box-shadow 0.2s;\n  display: flex;\n  align-items: center;\n  gap: 0.5em;\n}\nnav button.active {\n  background: #2563eb;\n  color: #fff;\n  box-shadow: 0 2px 8px rgba(37,99,235,0.15);\n}\nnav button:hover {\n  background: #dbeafe;\n  color: #1e293b;\n}\nmain {\n  max-width: 900px;\n  margin: 2rem auto;\n  background: #fff;\n  border-radius: 16px;\n  box-shadow: 0 4px 16px rgba(0,0,0,0.07);\n  padding: 2.5rem 2rem;\n  min-height: 350px;\n  font-size: 1.08rem;\n  line-height: 1.7;\n  transition: box-shadow 0.2s;\n}\nmain h2 {\n  color: #2563eb;\n  margin-top: 0;\n}\nmain pre {\n  background: #f1f5f9;\n  border-radius: 8px;\n  padding: 1em;\n  font-size: 0.98em;\n  overflow-x: auto;\n}\nmain ul, main ol {\n  margin-left: 1.2em;\n}\n.faq {\n  margin-top: 2em;\n}\n.faq dt {\n  font-weight: bold;\n  margin-top: 1em;\n}\n.faq dd {\n  margin-left: 1em;\n  margin-bottom: 1em;\n}\n.case-list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1.5em;\n  margin-top: 1em;\n}\n.case-item {\n  background: #f1f5f9;\n  border-radius: 8px;\n  padding: 1em;\n  flex: 1 1 250px;\n  min-width: 220px;\n  box-shadow: 0 1px 4px rgba(0,0,0,0.04);\n}\n.dev-card {\n  background: #f1f5f9;\n  border-radius: 8px;\n  padding: 1em;\n  margin: 1em 0;\n  display: flex;\n  align-items: center;\n  gap: 1em;\n}\n.dev-card img {\n  width: 48px;\n  height: 48px;\n  border-radius: 50%;\n  box-shadow: 0 1px 4px rgba(0,0,0,0.08);\n}\n.footer-links {\n  margin-top: 0.5em;\n}\n.footer-links a {\n  color: #2563eb;\n  margin: 0 0.7em;\n  text-decoration: none;\n  font-size: 1.1em;\n  transition: color 0.2s;\n}\n.footer-links a:hover {\n  color: #e11d48;\n}\n@media (max-width: 600px) {\n  main {\n    padding: 1.2rem 0.5rem;\n  }\n  header {\n    padding: 1rem 0.5rem 0.7rem 0.5rem;\n  }\n  nav button {\n    font-size: 0.95rem;\n    padding: 0.4rem 0.7rem;\n  }\n}\nfooter {\n  text-align: center;\n  padding: 1rem;\n  background: #e0e7ef;\n  color: #555;\n  font-size: 0.95rem;\n  margin-top: 2rem;\n}\n' }
    } },
  'src': { type: 'folder', children: {
      'src_fileOperationg.js': { type: 'file', content: 'const fs = require(\'fs\').promises;\nconst triviaList = [\n  \'カンガルーの赤ちゃんは生まれたとき2cmしかない！\',\n  \'富士山は1707年に噴火している！\',\n  \'バナナは実はベリー類に分類される！\',\n  \'日本では縦書きが一般的だけど、横書きの起源はタイプライターにあると言われてる！\'\n];\n\nasync function saveRandomTrivia() {\n  const randomTrivia = triviaList[Math.floor(Math.random() * triviaList.length)];\n  const data = { date: new Date().toISOString(), trivia: randomTrivia };\n  try {\n    await fs.writeFile(\'trivia.json\', JSON.stringify(data, null, 2), \'utf8\');\n    console.log(\'今日の豆知識を保存しました:\');\n    console.log(randomTrivia);\n  } catch (error) {\n    console.error(\'保存中にエラーが発生しました:\', error.message);\n  }\n}\n\nsaveRandomTrivia();\n' },
      'src_index.js': { type: 'file', content: '// メインエントリーポイント\nconsole.log("Hello, World!");\n\n// 配列処理の例\nconst arr = [1, 2, 3, 4];\nconst squared = arr.map(x => x * x);\nconsole.log("二乗した配列:", squared);\n\n// 非同期処理の例\nasync function getData() {\n  return await new Promise(res => setTimeout(() => res("1秒経ちました。"), 1000));\n}\ngetData().then(console.log);\n\n// プロジェクトのコードをここに記述してください\n' }
    } }
};
